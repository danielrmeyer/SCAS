// Generated by jextract

package com.example.symengine;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class cwrapper_h {

    cwrapper_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("symengine"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;

    private static class basic_new_heap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_POINTER    );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_new_heap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * basic_struct *basic_new_heap()
     * }
     */
    public static FunctionDescriptor basic_new_heap$descriptor() {
        return basic_new_heap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * basic_struct *basic_new_heap()
     * }
     */
    public static MethodHandle basic_new_heap$handle() {
        return basic_new_heap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * basic_struct *basic_new_heap()
     * }
     */
    public static MemorySegment basic_new_heap$address() {
        return basic_new_heap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * basic_struct *basic_new_heap()
     * }
     */
    public static MemorySegment basic_new_heap() {
        var mh$ = basic_new_heap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_new_heap");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_free_heap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_free_heap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void basic_free_heap(basic_struct *s)
     * }
     */
    public static FunctionDescriptor basic_free_heap$descriptor() {
        return basic_free_heap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void basic_free_heap(basic_struct *s)
     * }
     */
    public static MethodHandle basic_free_heap$handle() {
        return basic_free_heap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void basic_free_heap(basic_struct *s)
     * }
     */
    public static MemorySegment basic_free_heap$address() {
        return basic_free_heap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void basic_free_heap(basic_struct *s)
     * }
     */
    public static void basic_free_heap(MemorySegment s) {
        var mh$ = basic_free_heap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_free_heap", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_parse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_parse(basic b, const char *str)
     * }
     */
    public static FunctionDescriptor basic_parse$descriptor() {
        return basic_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_parse(basic b, const char *str)
     * }
     */
    public static MethodHandle basic_parse$handle() {
        return basic_parse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_parse(basic b, const char *str)
     * }
     */
    public static MemorySegment basic_parse$address() {
        return basic_parse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_parse(basic b, const char *str)
     * }
     */
    public static int basic_parse(MemorySegment b, MemorySegment str) {
        var mh$ = basic_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_parse", b, str);
            }
            return (int)mh$.invokeExact(b, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class symbol_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("symbol_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE symbol_set(basic s, const char *c)
     * }
     */
    public static FunctionDescriptor symbol_set$descriptor() {
        return symbol_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE symbol_set(basic s, const char *c)
     * }
     */
    public static MethodHandle symbol_set$handle() {
        return symbol_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE symbol_set(basic s, const char *c)
     * }
     */
    public static MemorySegment symbol_set$address() {
        return symbol_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE symbol_set(basic s, const char *c)
     * }
     */
    public static int symbol_set(MemorySegment s, MemorySegment c) {
        var mh$ = symbol_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("symbol_set", s, c);
            }
            return (int)mh$.invokeExact(s, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class integer_set_si {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_LONG
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("integer_set_si");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE integer_set_si(basic s, long i)
     * }
     */
    public static FunctionDescriptor integer_set_si$descriptor() {
        return integer_set_si.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE integer_set_si(basic s, long i)
     * }
     */
    public static MethodHandle integer_set_si$handle() {
        return integer_set_si.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE integer_set_si(basic s, long i)
     * }
     */
    public static MemorySegment integer_set_si$address() {
        return integer_set_si.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE integer_set_si(basic s, long i)
     * }
     */
    public static int integer_set_si(MemorySegment s, long i) {
        var mh$ = integer_set_si.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("integer_set_si", s, i);
            }
            return (int)mh$.invokeExact(s, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_add");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_add(basic s, const basic a, const basic b)
     * }
     */
    public static FunctionDescriptor basic_add$descriptor() {
        return basic_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_add(basic s, const basic a, const basic b)
     * }
     */
    public static MethodHandle basic_add$handle() {
        return basic_add.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_add(basic s, const basic a, const basic b)
     * }
     */
    public static MemorySegment basic_add$address() {
        return basic_add.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_add(basic s, const basic a, const basic b)
     * }
     */
    public static int basic_add(MemorySegment s, MemorySegment a, MemorySegment b) {
        var mh$ = basic_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_add", s, a, b);
            }
            return (int)mh$.invokeExact(s, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_sub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_sub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_sub(basic s, const basic a, const basic b)
     * }
     */
    public static FunctionDescriptor basic_sub$descriptor() {
        return basic_sub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_sub(basic s, const basic a, const basic b)
     * }
     */
    public static MethodHandle basic_sub$handle() {
        return basic_sub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_sub(basic s, const basic a, const basic b)
     * }
     */
    public static MemorySegment basic_sub$address() {
        return basic_sub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_sub(basic s, const basic a, const basic b)
     * }
     */
    public static int basic_sub(MemorySegment s, MemorySegment a, MemorySegment b) {
        var mh$ = basic_sub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_sub", s, a, b);
            }
            return (int)mh$.invokeExact(s, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_mul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_mul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_mul(basic s, const basic a, const basic b)
     * }
     */
    public static FunctionDescriptor basic_mul$descriptor() {
        return basic_mul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_mul(basic s, const basic a, const basic b)
     * }
     */
    public static MethodHandle basic_mul$handle() {
        return basic_mul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_mul(basic s, const basic a, const basic b)
     * }
     */
    public static MemorySegment basic_mul$address() {
        return basic_mul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_mul(basic s, const basic a, const basic b)
     * }
     */
    public static int basic_mul(MemorySegment s, MemorySegment a, MemorySegment b) {
        var mh$ = basic_mul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_mul", s, a, b);
            }
            return (int)mh$.invokeExact(s, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_div(basic s, const basic a, const basic b)
     * }
     */
    public static FunctionDescriptor basic_div$descriptor() {
        return basic_div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_div(basic s, const basic a, const basic b)
     * }
     */
    public static MethodHandle basic_div$handle() {
        return basic_div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_div(basic s, const basic a, const basic b)
     * }
     */
    public static MemorySegment basic_div$address() {
        return basic_div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_div(basic s, const basic a, const basic b)
     * }
     */
    public static int basic_div(MemorySegment s, MemorySegment a, MemorySegment b) {
        var mh$ = basic_div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_div", s, a, b);
            }
            return (int)mh$.invokeExact(s, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_pow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_pow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_pow(basic s, const basic a, const basic b)
     * }
     */
    public static FunctionDescriptor basic_pow$descriptor() {
        return basic_pow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_pow(basic s, const basic a, const basic b)
     * }
     */
    public static MethodHandle basic_pow$handle() {
        return basic_pow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_pow(basic s, const basic a, const basic b)
     * }
     */
    public static MemorySegment basic_pow$address() {
        return basic_pow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_pow(basic s, const basic a, const basic b)
     * }
     */
    public static int basic_pow(MemorySegment s, MemorySegment a, MemorySegment b) {
        var mh$ = basic_pow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_pow", s, a, b);
            }
            return (int)mh$.invokeExact(s, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_diff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_diff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_diff(basic s, const basic expr, const basic sym)
     * }
     */
    public static FunctionDescriptor basic_diff$descriptor() {
        return basic_diff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_diff(basic s, const basic expr, const basic sym)
     * }
     */
    public static MethodHandle basic_diff$handle() {
        return basic_diff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_diff(basic s, const basic expr, const basic sym)
     * }
     */
    public static MemorySegment basic_diff$address() {
        return basic_diff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_diff(basic s, const basic expr, const basic sym)
     * }
     */
    public static int basic_diff(MemorySegment s, MemorySegment expr, MemorySegment sym) {
        var mh$ = basic_diff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_diff", s, expr, sym);
            }
            return (int)mh$.invokeExact(s, expr, sym);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_eq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_eq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int basic_eq(const basic a, const basic b)
     * }
     */
    public static FunctionDescriptor basic_eq$descriptor() {
        return basic_eq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int basic_eq(const basic a, const basic b)
     * }
     */
    public static MethodHandle basic_eq$handle() {
        return basic_eq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int basic_eq(const basic a, const basic b)
     * }
     */
    public static MemorySegment basic_eq$address() {
        return basic_eq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int basic_eq(const basic a, const basic b)
     * }
     */
    public static int basic_eq(MemorySegment a, MemorySegment b) {
        var mh$ = basic_eq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_eq", a, b);
            }
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_neq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_neq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int basic_neq(const basic a, const basic b)
     * }
     */
    public static FunctionDescriptor basic_neq$descriptor() {
        return basic_neq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int basic_neq(const basic a, const basic b)
     * }
     */
    public static MethodHandle basic_neq$handle() {
        return basic_neq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int basic_neq(const basic a, const basic b)
     * }
     */
    public static MemorySegment basic_neq$address() {
        return basic_neq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int basic_neq(const basic a, const basic b)
     * }
     */
    public static int basic_neq(MemorySegment a, MemorySegment b) {
        var mh$ = basic_neq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_neq", a, b);
            }
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_expand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_expand(basic s, const basic a)
     * }
     */
    public static FunctionDescriptor basic_expand$descriptor() {
        return basic_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_expand(basic s, const basic a)
     * }
     */
    public static MethodHandle basic_expand$handle() {
        return basic_expand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_expand(basic s, const basic a)
     * }
     */
    public static MemorySegment basic_expand$address() {
        return basic_expand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_expand(basic s, const basic a)
     * }
     */
    public static int basic_expand(MemorySegment s, MemorySegment a) {
        var mh$ = basic_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_expand", s, a);
            }
            return (int)mh$.invokeExact(s, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_neg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_neg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_neg(basic s, const basic a)
     * }
     */
    public static FunctionDescriptor basic_neg$descriptor() {
        return basic_neg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_neg(basic s, const basic a)
     * }
     */
    public static MethodHandle basic_neg$handle() {
        return basic_neg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_neg(basic s, const basic a)
     * }
     */
    public static MemorySegment basic_neg$address() {
        return basic_neg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_neg(basic s, const basic a)
     * }
     */
    public static int basic_neg(MemorySegment s, MemorySegment a) {
        var mh$ = basic_neg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_neg", s, a);
            }
            return (int)mh$.invokeExact(s, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_abs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_abs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_abs(basic s, const basic a)
     * }
     */
    public static FunctionDescriptor basic_abs$descriptor() {
        return basic_abs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_abs(basic s, const basic a)
     * }
     */
    public static MethodHandle basic_abs$handle() {
        return basic_abs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_abs(basic s, const basic a)
     * }
     */
    public static MemorySegment basic_abs$address() {
        return basic_abs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_abs(basic s, const basic a)
     * }
     */
    public static int basic_abs(MemorySegment s, MemorySegment a) {
        var mh$ = basic_abs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_abs", s, a);
            }
            return (int)mh$.invokeExact(s, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_sqrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_sqrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_sqrt(basic s, const basic a)
     * }
     */
    public static FunctionDescriptor basic_sqrt$descriptor() {
        return basic_sqrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_sqrt(basic s, const basic a)
     * }
     */
    public static MethodHandle basic_sqrt$handle() {
        return basic_sqrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_sqrt(basic s, const basic a)
     * }
     */
    public static MemorySegment basic_sqrt$address() {
        return basic_sqrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_sqrt(basic s, const basic a)
     * }
     */
    public static int basic_sqrt(MemorySegment s, MemorySegment a) {
        var mh$ = basic_sqrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_sqrt", s, a);
            }
            return (int)mh$.invokeExact(s, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_cbrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_cbrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_cbrt(basic s, const basic a)
     * }
     */
    public static FunctionDescriptor basic_cbrt$descriptor() {
        return basic_cbrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_cbrt(basic s, const basic a)
     * }
     */
    public static MethodHandle basic_cbrt$handle() {
        return basic_cbrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_cbrt(basic s, const basic a)
     * }
     */
    public static MemorySegment basic_cbrt$address() {
        return basic_cbrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_cbrt(basic s, const basic a)
     * }
     */
    public static int basic_cbrt(MemorySegment s, MemorySegment a) {
        var mh$ = basic_cbrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_cbrt", s, a);
            }
            return (int)mh$.invokeExact(s, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *basic_str(const basic s)
     * }
     */
    public static FunctionDescriptor basic_str$descriptor() {
        return basic_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *basic_str(const basic s)
     * }
     */
    public static MethodHandle basic_str$handle() {
        return basic_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *basic_str(const basic s)
     * }
     */
    public static MemorySegment basic_str$address() {
        return basic_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *basic_str(const basic s)
     * }
     */
    public static MemorySegment basic_str(MemorySegment s) {
        var mh$ = basic_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_str", s);
            }
            return (MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_str_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            cwrapper_h.C_POINTER
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_str_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void basic_str_free(char *s)
     * }
     */
    public static FunctionDescriptor basic_str_free$descriptor() {
        return basic_str_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void basic_str_free(char *s)
     * }
     */
    public static MethodHandle basic_str_free$handle() {
        return basic_str_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void basic_str_free(char *s)
     * }
     */
    public static MemorySegment basic_str_free$address() {
        return basic_str_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void basic_str_free(char *s)
     * }
     */
    public static void basic_str_free(MemorySegment s) {
        var mh$ = basic_str_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_str_free", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class basic_evalf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cwrapper_h.C_INT,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_POINTER,
            cwrapper_h.C_LONG,
            cwrapper_h.C_INT
        );

        public static final MemorySegment ADDR = cwrapper_h.findOrThrow("basic_evalf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_evalf(basic s, const basic b, unsigned long bits, int real)
     * }
     */
    public static FunctionDescriptor basic_evalf$descriptor() {
        return basic_evalf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_evalf(basic s, const basic b, unsigned long bits, int real)
     * }
     */
    public static MethodHandle basic_evalf$handle() {
        return basic_evalf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_evalf(basic s, const basic b, unsigned long bits, int real)
     * }
     */
    public static MemorySegment basic_evalf$address() {
        return basic_evalf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CWRAPPER_OUTPUT_TYPE basic_evalf(basic s, const basic b, unsigned long bits, int real)
     * }
     */
    public static int basic_evalf(MemorySegment s, MemorySegment b, long bits, int real) {
        var mh$ = basic_evalf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("basic_evalf", s, b, bits, real);
            }
            return (int)mh$.invokeExact(s, b, bits, real);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

